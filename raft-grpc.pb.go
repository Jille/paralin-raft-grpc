// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft-grpc.proto

package raftgrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LogEntryType is the type of the LogEntry
type LogEntryType int32

const (
	LogEntryType_LOG_ENTRY_COMMAND                LogEntryType = 0
	LogEntryType_LOG_ENTRY_NOOP                   LogEntryType = 1
	LogEntryType_LOG_ENTRY_ADD_PEER_DEPRECATED    LogEntryType = 2
	LogEntryType_LOG_ENTRY_REMOVE_PEER_DEPRECATED LogEntryType = 3
	LogEntryType_LOG_ENTRY_BARRIER                LogEntryType = 4
	LogEntryType_LOG_ENTRY_CONFIGURATION          LogEntryType = 5
)

var LogEntryType_name = map[int32]string{
	0: "LOG_ENTRY_COMMAND",
	1: "LOG_ENTRY_NOOP",
	2: "LOG_ENTRY_ADD_PEER_DEPRECATED",
	3: "LOG_ENTRY_REMOVE_PEER_DEPRECATED",
	4: "LOG_ENTRY_BARRIER",
	5: "LOG_ENTRY_CONFIGURATION",
}

var LogEntryType_value = map[string]int32{
	"LOG_ENTRY_COMMAND":                0,
	"LOG_ENTRY_NOOP":                   1,
	"LOG_ENTRY_ADD_PEER_DEPRECATED":    2,
	"LOG_ENTRY_REMOVE_PEER_DEPRECATED": 3,
	"LOG_ENTRY_BARRIER":                4,
	"LOG_ENTRY_CONFIGURATION":          5,
}

func (x LogEntryType) String() string {
	return proto.EnumName(LogEntryType_name, int32(x))
}

func (LogEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{0}
}

// RaftHeader describes information contained in every RPC command + response.
type RaftHeader struct {
	ProtocolVersion      int32    `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftHeader) Reset()         { *m = RaftHeader{} }
func (m *RaftHeader) String() string { return proto.CompactTextString(m) }
func (*RaftHeader) ProtoMessage()    {}
func (*RaftHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{0}
}

func (m *RaftHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftHeader.Unmarshal(m, b)
}
func (m *RaftHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftHeader.Marshal(b, m, deterministic)
}
func (m *RaftHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftHeader.Merge(m, src)
}
func (m *RaftHeader) XXX_Size() int {
	return xxx_messageInfo_RaftHeader.Size(m)
}
func (m *RaftHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RaftHeader proto.InternalMessageInfo

func (m *RaftHeader) GetProtocolVersion() int32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

// LogEntry contains a raft log entry.
type LogEntry struct {
	// Index holds the index of the log entry.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Term holds the election term of the log entry.
	Term uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	// Type holds the type of the log entry.
	Type LogEntryType `protobuf:"varint,3,opt,name=type,proto3,enum=raftgrpc.LogEntryType" json:"type,omitempty"`
	// Data holds the log entry's type-specific data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Extensions holds an opaque byte slice of information for middleware.
	Extensions           []byte   `protobuf:"bytes,5,opt,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{1}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetType() LogEntryType {
	if m != nil {
		return m.Type
	}
	return LogEntryType_LOG_ENTRY_COMMAND
}

func (m *LogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogEntry) GetExtensions() []byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// PeerNameContainer encodes a peer name to bytes.
type PeerNameContainer struct {
	// PeerName is the peer name in the container.
	PeerName             string   `protobuf:"bytes,1,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerNameContainer) Reset()         { *m = PeerNameContainer{} }
func (m *PeerNameContainer) String() string { return proto.CompactTextString(m) }
func (*PeerNameContainer) ProtoMessage()    {}
func (*PeerNameContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{2}
}

func (m *PeerNameContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerNameContainer.Unmarshal(m, b)
}
func (m *PeerNameContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerNameContainer.Marshal(b, m, deterministic)
}
func (m *PeerNameContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerNameContainer.Merge(m, src)
}
func (m *PeerNameContainer) XXX_Size() int {
	return xxx_messageInfo_PeerNameContainer.Size(m)
}
func (m *PeerNameContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerNameContainer.DiscardUnknown(m)
}

var xxx_messageInfo_PeerNameContainer proto.InternalMessageInfo

func (m *PeerNameContainer) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

// AppendEntriesRequest maps to the raft AppendEntriesRequest.
type AppendEntriesRequest struct {
	// Term is the current election term.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Leader is the current leader id.
	Leader []byte `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// PrevLogEntry is the previous log entry.
	PrevLogEntry uint64 `protobuf:"varint,3,opt,name=prev_log_entry,json=prevLogEntry,proto3" json:"prev_log_entry,omitempty"`
	// PrevLogTerm is the previous log term.
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	// Entries are the new log entries to commit.
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// LeaderCommitIndex is the commit index on the leader.
	LeaderCommitIndex    uint64      `protobuf:"varint,6,opt,name=leader_commit_index,json=leaderCommitIndex,proto3" json:"leader_commit_index,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{3}
}

func (m *AppendEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRequest.Unmarshal(m, b)
}
func (m *AppendEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRequest.Marshal(b, m, deterministic)
}
func (m *AppendEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRequest.Merge(m, src)
}
func (m *AppendEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRequest.Size(m)
}
func (m *AppendEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRequest proto.InternalMessageInfo

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeader() []byte {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *AppendEntriesRequest) GetPrevLogEntry() uint64 {
	if m != nil {
		return m.PrevLogEntry
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommitIndex() uint64 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// AppendEntriesResponse is the response to the appendentries request.
type AppendEntriesResponse struct {
	// Term is the newer term if the leader is out of date.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// LastLog is a hint to help accelerate rebuilding slow nodes.
	LastLog uint64 `protobuf:"varint,2,opt,name=last_log,json=lastLog,proto3" json:"last_log,omitempty"`
	// Success will be false if we have a conflicting entry.
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// NoRetryBackoff indicates we don't need to backoff the next attempt.
	NoRetryBackoff       bool        `protobuf:"varint,4,opt,name=no_retry_backoff,json=noRetryBackoff,proto3" json:"no_retry_backoff,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{4}
}

func (m *AppendEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesResponse.Unmarshal(m, b)
}
func (m *AppendEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesResponse.Marshal(b, m, deterministic)
}
func (m *AppendEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesResponse.Merge(m, src)
}
func (m *AppendEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesResponse.Size(m)
}
func (m *AppendEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesResponse proto.InternalMessageInfo

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetLastLog() uint64 {
	if m != nil {
		return m.LastLog
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesResponse) GetNoRetryBackoff() bool {
	if m != nil {
		return m.NoRetryBackoff
	}
	return false
}

func (m *AppendEntriesResponse) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// RequestVoteRequest is the command used by a candidate to ask a Raft peer for a vote in an election.
type RequestVoteRequest struct {
	// Term is the new voting term.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Candidate is the candidate id
	Candidate []byte `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// LastLogIndex is the last log index.
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	// LastLogTerm is the last log term.
	LastLogTerm uint64 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	// LeadershipTransfer indicates to peers if the vote was triggered by
	// a leadership transfer.
	LeadershipTransfer   bool        `protobuf:"varint,5,opt,name=leadership_transfer,json=leadershipTransfer,proto3" json:"leadership_transfer,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RequestVoteRequest) Reset()         { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()    {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{5}
}

func (m *RequestVoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteRequest.Unmarshal(m, b)
}
func (m *RequestVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteRequest.Marshal(b, m, deterministic)
}
func (m *RequestVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteRequest.Merge(m, src)
}
func (m *RequestVoteRequest) XXX_Size() int {
	return xxx_messageInfo_RequestVoteRequest.Size(m)
}
func (m *RequestVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteRequest proto.InternalMessageInfo

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidate() []byte {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVoteRequest) GetLeadershipTransfer() bool {
	if m != nil {
		return m.LeadershipTransfer
	}
	return false
}

func (m *RequestVoteRequest) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// RequestVoteResponse is the response returned from a RequestVoteRequest.
type RequestVoteResponse struct {
	// Term is the newer term if the lader is out of date.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Peers contains the current peers list so a node can shutdown on removal.
	Peers []byte `protobuf:"bytes,2,opt,name=peers,proto3" json:"peers,omitempty"`
	// Granted if the vote was granted.
	Granted              bool        `protobuf:"varint,3,opt,name=granted,proto3" json:"granted,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RequestVoteResponse) Reset()         { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()    {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{6}
}

func (m *RequestVoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteResponse.Unmarshal(m, b)
}
func (m *RequestVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteResponse.Marshal(b, m, deterministic)
}
func (m *RequestVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteResponse.Merge(m, src)
}
func (m *RequestVoteResponse) XXX_Size() int {
	return xxx_messageInfo_RequestVoteResponse.Size(m)
}
func (m *RequestVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteResponse proto.InternalMessageInfo

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetPeers() []byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *RequestVoteResponse) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func (m *RequestVoteResponse) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// InstallSnapshotStream encodes information used when transmitting a snapshot.
type InstallSnapshotStream struct {
	// Types that are valid to be assigned to Payload:
	//	*InstallSnapshotStream_Request
	//	*InstallSnapshotStream_Data
	Payload              isInstallSnapshotStream_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *InstallSnapshotStream) Reset()         { *m = InstallSnapshotStream{} }
func (m *InstallSnapshotStream) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotStream) ProtoMessage()    {}
func (*InstallSnapshotStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{7}
}

func (m *InstallSnapshotStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotStream.Unmarshal(m, b)
}
func (m *InstallSnapshotStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotStream.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotStream.Merge(m, src)
}
func (m *InstallSnapshotStream) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotStream.Size(m)
}
func (m *InstallSnapshotStream) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotStream.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotStream proto.InternalMessageInfo

type isInstallSnapshotStream_Payload interface {
	isInstallSnapshotStream_Payload()
}

type InstallSnapshotStream_Request struct {
	Request *InstallSnapshotRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type InstallSnapshotStream_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*InstallSnapshotStream_Request) isInstallSnapshotStream_Payload() {}

func (*InstallSnapshotStream_Data) isInstallSnapshotStream_Payload() {}

func (m *InstallSnapshotStream) GetPayload() isInstallSnapshotStream_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *InstallSnapshotStream) GetRequest() *InstallSnapshotRequest {
	if x, ok := m.GetPayload().(*InstallSnapshotStream_Request); ok {
		return x.Request
	}
	return nil
}

func (m *InstallSnapshotStream) GetData() []byte {
	if x, ok := m.GetPayload().(*InstallSnapshotStream_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstallSnapshotStream) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstallSnapshotStream_Request)(nil),
		(*InstallSnapshotStream_Data)(nil),
	}
}

// InstallSnapshotRequest is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
type InstallSnapshotRequest struct {
	// Term is the current term.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Leader is the current leader.
	Leader []byte `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// LastLogIndex is the last log index included in the snapshot.
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	// LastLogTerm is the last log term included in the snapshot.
	LastLogTerm uint64 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	// Peers is the peer set in the snapshot
	Peers []byte `protobuf:"bytes,5,opt,name=peers,proto3" json:"peers,omitempty"`
	// Configuration stores the cluster membership information.
	Configuration []byte `protobuf:"bytes,6,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// ConfigurationIdx is the log index where configuration was originally committed.
	ConfigIdx uint64 `protobuf:"varint,7,opt,name=config_idx,json=configIdx,proto3" json:"config_idx,omitempty"`
	// Size is the size of the snapshot.
	Size                 int64       `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InstallSnapshotRequest) Reset()         { *m = InstallSnapshotRequest{} }
func (m *InstallSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotRequest) ProtoMessage()    {}
func (*InstallSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{8}
}

func (m *InstallSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotRequest.Unmarshal(m, b)
}
func (m *InstallSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotRequest.Merge(m, src)
}
func (m *InstallSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotRequest.Size(m)
}
func (m *InstallSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotRequest proto.InternalMessageInfo

func (m *InstallSnapshotRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotRequest) GetLeader() []byte {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *InstallSnapshotRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *InstallSnapshotRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *InstallSnapshotRequest) GetPeers() []byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *InstallSnapshotRequest) GetConfiguration() []byte {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *InstallSnapshotRequest) GetConfigIdx() uint64 {
	if m != nil {
		return m.ConfigIdx
	}
	return 0
}

func (m *InstallSnapshotRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *InstallSnapshotRequest) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// InstallSnapshotResponse is the response to the InstallSnapshot call.
type InstallSnapshotResponse struct {
	// Term is the term in the snapshot.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Success indiciates if the snapshot was installed properly.
	Success              bool        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InstallSnapshotResponse) Reset()         { *m = InstallSnapshotResponse{} }
func (m *InstallSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotResponse) ProtoMessage()    {}
func (*InstallSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{9}
}

func (m *InstallSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotResponse.Unmarshal(m, b)
}
func (m *InstallSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotResponse.Merge(m, src)
}
func (m *InstallSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotResponse.Size(m)
}
func (m *InstallSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotResponse proto.InternalMessageInfo

func (m *InstallSnapshotResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *InstallSnapshotResponse) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// AppendEntriesPipelineResponse is the wrapper of an AppendEntriesResponse in a pipeline.
type AppendEntriesPipelineResponse struct {
	// Error is any potential error.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Response is the response object if necessary
	Response             *AppendEntriesResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AppendEntriesPipelineResponse) Reset()         { *m = AppendEntriesPipelineResponse{} }
func (m *AppendEntriesPipelineResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesPipelineResponse) ProtoMessage()    {}
func (*AppendEntriesPipelineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{10}
}

func (m *AppendEntriesPipelineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesPipelineResponse.Unmarshal(m, b)
}
func (m *AppendEntriesPipelineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesPipelineResponse.Marshal(b, m, deterministic)
}
func (m *AppendEntriesPipelineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesPipelineResponse.Merge(m, src)
}
func (m *AppendEntriesPipelineResponse) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesPipelineResponse.Size(m)
}
func (m *AppendEntriesPipelineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesPipelineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesPipelineResponse proto.InternalMessageInfo

func (m *AppendEntriesPipelineResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AppendEntriesPipelineResponse) GetResponse() *AppendEntriesResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TimeoutNowRequest is the command used by a leader to signal another server to start an election.
type TimeoutNowRequest struct {
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TimeoutNowRequest) Reset()         { *m = TimeoutNowRequest{} }
func (m *TimeoutNowRequest) String() string { return proto.CompactTextString(m) }
func (*TimeoutNowRequest) ProtoMessage()    {}
func (*TimeoutNowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{11}
}

func (m *TimeoutNowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeoutNowRequest.Unmarshal(m, b)
}
func (m *TimeoutNowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeoutNowRequest.Marshal(b, m, deterministic)
}
func (m *TimeoutNowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutNowRequest.Merge(m, src)
}
func (m *TimeoutNowRequest) XXX_Size() int {
	return xxx_messageInfo_TimeoutNowRequest.Size(m)
}
func (m *TimeoutNowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutNowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutNowRequest proto.InternalMessageInfo

func (m *TimeoutNowRequest) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

// TimeoutNowResponse is the response to TimeoutNowRequest.
type TimeoutNowResponse struct {
	RaftHeader           *RaftHeader `protobuf:"bytes,99,opt,name=raft_header,json=raftHeader,proto3" json:"raft_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TimeoutNowResponse) Reset()         { *m = TimeoutNowResponse{} }
func (m *TimeoutNowResponse) String() string { return proto.CompactTextString(m) }
func (*TimeoutNowResponse) ProtoMessage()    {}
func (*TimeoutNowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f467f6d5851ca967, []int{12}
}

func (m *TimeoutNowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeoutNowResponse.Unmarshal(m, b)
}
func (m *TimeoutNowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeoutNowResponse.Marshal(b, m, deterministic)
}
func (m *TimeoutNowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutNowResponse.Merge(m, src)
}
func (m *TimeoutNowResponse) XXX_Size() int {
	return xxx_messageInfo_TimeoutNowResponse.Size(m)
}
func (m *TimeoutNowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutNowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutNowResponse proto.InternalMessageInfo

func (m *TimeoutNowResponse) GetRaftHeader() *RaftHeader {
	if m != nil {
		return m.RaftHeader
	}
	return nil
}

func init() {
	proto.RegisterEnum("raftgrpc.LogEntryType", LogEntryType_name, LogEntryType_value)
	proto.RegisterType((*RaftHeader)(nil), "raftgrpc.RaftHeader")
	proto.RegisterType((*LogEntry)(nil), "raftgrpc.LogEntry")
	proto.RegisterType((*PeerNameContainer)(nil), "raftgrpc.PeerNameContainer")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raftgrpc.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raftgrpc.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "raftgrpc.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raftgrpc.RequestVoteResponse")
	proto.RegisterType((*InstallSnapshotStream)(nil), "raftgrpc.InstallSnapshotStream")
	proto.RegisterType((*InstallSnapshotRequest)(nil), "raftgrpc.InstallSnapshotRequest")
	proto.RegisterType((*InstallSnapshotResponse)(nil), "raftgrpc.InstallSnapshotResponse")
	proto.RegisterType((*AppendEntriesPipelineResponse)(nil), "raftgrpc.AppendEntriesPipelineResponse")
	proto.RegisterType((*TimeoutNowRequest)(nil), "raftgrpc.TimeoutNowRequest")
	proto.RegisterType((*TimeoutNowResponse)(nil), "raftgrpc.TimeoutNowResponse")
}

func init() {
	proto.RegisterFile("raft-grpc.proto", fileDescriptor_f467f6d5851ca967)
}

var fileDescriptor_f467f6d5851ca967 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x72, 0xe2, 0x46,
	0x17, 0xb6, 0xb8, 0x18, 0x38, 0xf8, 0x82, 0x7b, 0xb0, 0x87, 0xdf, 0x97, 0x19, 0x46, 0xe5, 0xaa,
	0x9f, 0x4c, 0x25, 0xce, 0x14, 0xa9, 0x54, 0x16, 0xc9, 0x06, 0x1b, 0x65, 0x4c, 0x62, 0x03, 0xd5,
	0x26, 0xae, 0x9a, 0x95, 0xaa, 0x47, 0x3a, 0x60, 0x55, 0x40, 0xad, 0xb4, 0xda, 0x8e, 0xc9, 0x22,
	0xcf, 0x90, 0x45, 0x5e, 0x20, 0xef, 0x90, 0xca, 0x2e, 0x8b, 0xbc, 0x55, 0x96, 0x29, 0xb5, 0x24,
	0x24, 0xc0, 0xf6, 0x54, 0xa8, 0xec, 0x74, 0x2e, 0x7d, 0xfa, 0xfb, 0xce, 0x77, 0xfa, 0x00, 0x6c,
	0x0b, 0x36, 0x94, 0x9f, 0x8c, 0x84, 0x67, 0x9d, 0x78, 0x82, 0x4b, 0x4e, 0x8a, 0x81, 0x23, 0xb0,
	0xf5, 0x2f, 0x00, 0x28, 0x1b, 0xca, 0x73, 0x64, 0x36, 0x0a, 0xf2, 0x11, 0x54, 0x54, 0x82, 0xc5,
	0xc7, 0xe6, 0x1d, 0x0a, 0xdf, 0xe1, 0x6e, 0x4d, 0xab, 0x6b, 0x8d, 0x3c, 0xdd, 0x8e, 0xfd, 0xd7,
	0xa1, 0x5b, 0xff, 0x55, 0x83, 0xe2, 0x05, 0x1f, 0x19, 0xae, 0x14, 0x53, 0x52, 0x85, 0xbc, 0xe3,
	0xda, 0x78, 0xaf, 0x92, 0x73, 0x34, 0x34, 0x08, 0x81, 0x9c, 0x44, 0x31, 0xa9, 0x65, 0x94, 0x53,
	0x7d, 0x93, 0xd7, 0x90, 0x93, 0x53, 0x0f, 0x6b, 0xd9, 0xba, 0xd6, 0xd8, 0x6a, 0xee, 0x9d, 0xc4,
	0x40, 0x4e, 0xe2, 0x5a, 0x83, 0xa9, 0x87, 0x54, 0xe5, 0x04, 0xe7, 0x6d, 0x26, 0x59, 0x2d, 0x57,
	0xd7, 0x1a, 0x1b, 0x54, 0x7d, 0x93, 0x17, 0x00, 0x78, 0x2f, 0xd1, 0x0d, 0x30, 0xf8, 0xb5, 0xbc,
	0x8a, 0xa4, 0x3c, 0xfa, 0x1b, 0xd8, 0xe9, 0x23, 0x8a, 0x2e, 0x9b, 0xe0, 0x19, 0x77, 0x25, 0x73,
	0x5c, 0x14, 0xe4, 0x00, 0x4a, 0x1e, 0xa2, 0x30, 0x5d, 0x36, 0x41, 0x05, 0xb1, 0x44, 0x8b, 0x5e,
	0x94, 0xa5, 0xff, 0x96, 0x81, 0x6a, 0xcb, 0xf3, 0xd0, 0xb5, 0x83, 0xfb, 0x1d, 0xf4, 0x29, 0xfe,
	0x70, 0x8b, 0xbe, 0x9c, 0xc1, 0xd7, 0x52, 0xf0, 0xf7, 0x60, 0x7d, 0xac, 0x5a, 0xa5, 0x48, 0x6d,
	0xd0, 0xc8, 0x22, 0xc7, 0xb0, 0xe5, 0x09, 0xbc, 0x33, 0xc7, 0x7c, 0x64, 0x62, 0x40, 0x43, 0x11,
	0xcc, 0xd1, 0x8d, 0xc0, 0x3b, 0x6b, 0x93, 0x0e, 0x9b, 0xb3, 0x2c, 0x55, 0x3a, 0xa7, 0x92, 0xca,
	0x51, 0xd2, 0x20, 0xb8, 0xe1, 0x63, 0x28, 0x60, 0x88, 0xa3, 0x96, 0xaf, 0x67, 0x1b, 0xe5, 0x26,
	0x59, 0xee, 0x11, 0x8d, 0x53, 0xc8, 0x09, 0x3c, 0x0b, 0x11, 0x98, 0x16, 0x9f, 0x4c, 0x1c, 0x69,
	0x86, 0x32, 0xac, 0xab, 0xba, 0x3b, 0x61, 0xe8, 0x4c, 0x45, 0x3a, 0x4a, 0x92, 0xcf, 0xa1, 0x1c,
	0x54, 0x33, 0x6f, 0x42, 0x12, 0x56, 0x5d, 0x6b, 0x94, 0x9b, 0xd5, 0xe4, 0x86, 0x64, 0x16, 0x28,
	0x88, 0xd9, 0xb7, 0xfe, 0x97, 0x06, 0xbb, 0x0b, 0x3d, 0xf2, 0x3d, 0xee, 0xfa, 0xf8, 0x60, 0x93,
	0xfe, 0x07, 0xc5, 0x31, 0xf3, 0x65, 0x40, 0x33, 0xd2, 0xbe, 0x10, 0xd8, 0x17, 0x7c, 0x44, 0x6a,
	0x50, 0xf0, 0x6f, 0x2d, 0x0b, 0x7d, 0x5f, 0x35, 0xa8, 0x48, 0x63, 0x93, 0x34, 0xa0, 0xe2, 0x72,
	0x53, 0xa0, 0x14, 0x53, 0xf3, 0x3d, 0xb3, 0xbe, 0xe7, 0xc3, 0xa1, 0x6a, 0x4f, 0x91, 0x6e, 0xb9,
	0x9c, 0x06, 0xee, 0xd3, 0xd0, 0xbb, 0x2a, 0x87, 0xbf, 0x35, 0x20, 0x91, 0xb4, 0xd7, 0x5c, 0xe2,
	0x53, 0x2a, 0x1f, 0x42, 0xc9, 0x62, 0xae, 0xed, 0xd8, 0x4c, 0x62, 0x24, 0x74, 0xe2, 0x08, 0xb4,
	0x8e, 0xe9, 0x45, 0xed, 0x8e, 0xb4, 0x8e, 0x48, 0x86, 0x9d, 0xd6, 0x61, 0x73, 0x96, 0x95, 0xd6,
	0x3a, 0x4a, 0x52, 0x5a, 0x7f, 0x1a, 0xab, 0xe7, 0xdf, 0x38, 0x9e, 0x29, 0x05, 0x73, 0xfd, 0x21,
	0x0a, 0x35, 0xd5, 0x45, 0x4a, 0x92, 0xd0, 0x20, 0x8a, 0xac, 0x4a, 0xfd, 0x17, 0x0d, 0x9e, 0xcd,
	0x51, 0x7f, 0x42, 0xbc, 0x2a, 0xe4, 0x83, 0xa7, 0xe1, 0x47, 0xbc, 0x43, 0x23, 0xd0, 0x6d, 0x24,
	0x98, 0x2b, 0xd1, 0x8e, 0x75, 0x8b, 0xcc, 0x55, 0x21, 0xdd, 0xc1, 0x6e, 0xc7, 0xf5, 0x25, 0x1b,
	0x8f, 0xaf, 0x5c, 0xe6, 0xf9, 0x37, 0x5c, 0x5e, 0x49, 0x81, 0x6c, 0x42, 0xbe, 0x82, 0x82, 0x08,
	0xa1, 0x2a, 0x58, 0xe5, 0x66, 0x3d, 0xa9, 0xb5, 0x70, 0x22, 0xa2, 0x74, 0xbe, 0x46, 0xe3, 0x23,
	0xa4, 0x1a, 0xad, 0x0c, 0x05, 0xfe, 0x7c, 0x2d, 0x5c, 0x1a, 0xa7, 0x25, 0x28, 0x78, 0x6c, 0x3a,
	0xe6, 0xcc, 0xd6, 0x7f, 0xcf, 0xc0, 0xde, 0xc3, 0x65, 0xfe, 0xed, 0x7b, 0xff, 0x8f, 0x66, 0x60,
	0xd6, 0xef, 0x7c, 0xba, 0xdf, 0xc7, 0xb0, 0x69, 0x71, 0x77, 0xe8, 0x8c, 0x6e, 0x05, 0x93, 0xc1,
	0x16, 0x5e, 0x57, 0xd1, 0x79, 0x27, 0x39, 0x02, 0x08, 0x1d, 0xa6, 0x63, 0xdf, 0xd7, 0x0a, 0xaa,
	0x78, 0x29, 0xf4, 0x74, 0x6c, 0xb5, 0x7f, 0x7d, 0xe7, 0x27, 0xac, 0x15, 0xeb, 0x5a, 0x23, 0x4b,
	0xd5, 0xf7, 0xaa, 0x72, 0xfd, 0x0c, 0xcf, 0x97, 0xba, 0xf6, 0xc4, 0x10, 0xa5, 0x9e, 0x79, 0x66,
	0xfe, 0x99, 0xaf, 0x78, 0xbf, 0x80, 0xa3, 0xb9, 0xfd, 0xd3, 0x77, 0x3c, 0x1c, 0x3b, 0x6e, 0x32,
	0xca, 0x55, 0xc8, 0xa3, 0x10, 0x5c, 0x44, 0xeb, 0x3d, 0x34, 0xc8, 0x97, 0x50, 0x14, 0x51, 0x86,
	0x02, 0x52, 0x6e, 0xbe, 0x4c, 0xae, 0x7a, 0x70, 0xa1, 0xd1, 0xd9, 0x01, 0xfd, 0x1b, 0xd8, 0x19,
	0x38, 0x13, 0xe4, 0xb7, 0xb2, 0xcb, 0x7f, 0x8c, 0x87, 0x64, 0x45, 0xfc, 0xdf, 0x02, 0x49, 0xd7,
	0x8a, 0x40, 0xaf, 0x56, 0xec, 0xf5, 0x1f, 0x1a, 0x6c, 0xa4, 0x7f, 0x2e, 0xc9, 0x2e, 0xec, 0x5c,
	0xf4, 0xde, 0x9a, 0x46, 0x77, 0x40, 0xdf, 0x99, 0x67, 0xbd, 0xcb, 0xcb, 0x56, 0xb7, 0x5d, 0x59,
	0x23, 0x04, 0xb6, 0x12, 0x77, 0xb7, 0xd7, 0xeb, 0x57, 0x34, 0xf2, 0x0a, 0x8e, 0x12, 0x5f, 0xab,
	0xdd, 0x36, 0xfb, 0x86, 0x41, 0xcd, 0xb6, 0xd1, 0xa7, 0xc6, 0x59, 0x6b, 0x60, 0xb4, 0x2b, 0x19,
	0x72, 0x0c, 0xf5, 0x24, 0x85, 0x1a, 0x97, 0xbd, 0x6b, 0x63, 0x29, 0x2b, 0x3b, 0x7f, 0xe7, 0x69,
	0x8b, 0xd2, 0x8e, 0x41, 0x2b, 0x39, 0x72, 0x00, 0xcf, 0xd3, 0x50, 0xba, 0x5f, 0x77, 0xde, 0x7e,
	0x47, 0x5b, 0x83, 0x4e, 0xaf, 0x5b, 0xc9, 0x37, 0xff, 0xcc, 0x42, 0x39, 0xe0, 0x74, 0x85, 0xe2,
	0xce, 0xb1, 0x90, 0x0c, 0x17, 0x7e, 0x55, 0x62, 0x55, 0xc9, 0x8b, 0x47, 0x55, 0x52, 0x2a, 0xec,
	0xff, 0xff, 0x91, 0xf8, 0xe2, 0x58, 0xe8, 0x6b, 0x0d, 0xed, 0x8d, 0x46, 0x28, 0x6c, 0xce, 0xa5,
	0x7d, 0xb0, 0xfe, 0x87, 0xa6, 0x44, 0x5f, 0x23, 0x17, 0x50, 0x4e, 0xad, 0x54, 0x72, 0x98, 0x52,
	0x6d, 0xe9, 0x47, 0x66, 0xff, 0xe8, 0x91, 0xe8, 0xac, 0xda, 0x3b, 0xd8, 0x5e, 0x78, 0x5f, 0xe4,
	0xe5, 0xa3, 0x7b, 0x2f, 0xdc, 0x94, 0xfb, 0xaf, 0x9e, 0x58, 0x8c, 0x09, 0x7d, 0xd2, 0x01, 0x48,
	0x46, 0x8f, 0x1c, 0x24, 0x87, 0x96, 0x86, 0x7b, 0xff, 0xf0, 0xe1, 0x60, 0x5c, 0xec, 0xfd, 0xba,
	0xfa, 0x13, 0xf8, 0xd9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa4, 0x7b, 0xe9, 0x50, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftServiceClient is the client API for RaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftServiceClient interface {
	// AppendEntriesPipeline opens an AppendEntries message stream.
	AppendEntriesPipeline(ctx context.Context, opts ...grpc.CallOption) (RaftService_AppendEntriesPipelineClient, error)
	// AppendEntries performs a single append entries request / response.
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	// RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	// InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
	InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftService_InstallSnapshotClient, error)
	// TimeoutNow is used to start a leadership transfer to the target node.
	TimeoutNow(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error)
}

type raftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftServiceClient(cc grpc.ClientConnInterface) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) AppendEntriesPipeline(ctx context.Context, opts ...grpc.CallOption) (RaftService_AppendEntriesPipelineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftService_serviceDesc.Streams[0], "/raftgrpc.RaftService/AppendEntriesPipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceAppendEntriesPipelineClient{stream}
	return x, nil
}

type RaftService_AppendEntriesPipelineClient interface {
	Send(*AppendEntriesRequest) error
	Recv() (*AppendEntriesPipelineResponse, error)
	grpc.ClientStream
}

type raftServiceAppendEntriesPipelineClient struct {
	grpc.ClientStream
}

func (x *raftServiceAppendEntriesPipelineClient) Send(m *AppendEntriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceAppendEntriesPipelineClient) Recv() (*AppendEntriesPipelineResponse, error) {
	m := new(AppendEntriesPipelineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/raftgrpc.RaftService/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/raftgrpc.RaftService/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftService_InstallSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftService_serviceDesc.Streams[1], "/raftgrpc.RaftService/InstallSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceInstallSnapshotClient{stream}
	return x, nil
}

type RaftService_InstallSnapshotClient interface {
	Send(*InstallSnapshotStream) error
	CloseAndRecv() (*InstallSnapshotResponse, error)
	grpc.ClientStream
}

type raftServiceInstallSnapshotClient struct {
	grpc.ClientStream
}

func (x *raftServiceInstallSnapshotClient) Send(m *InstallSnapshotStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceInstallSnapshotClient) CloseAndRecv() (*InstallSnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InstallSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftServiceClient) TimeoutNow(ctx context.Context, in *TimeoutNowRequest, opts ...grpc.CallOption) (*TimeoutNowResponse, error) {
	out := new(TimeoutNowResponse)
	err := c.cc.Invoke(ctx, "/raftgrpc.RaftService/TimeoutNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServiceServer is the server API for RaftService service.
type RaftServiceServer interface {
	// AppendEntriesPipeline opens an AppendEntries message stream.
	AppendEntriesPipeline(RaftService_AppendEntriesPipelineServer) error
	// AppendEntries performs a single append entries request / response.
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	// RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	// InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
	InstallSnapshot(RaftService_InstallSnapshotServer) error
	// TimeoutNow is used to start a leadership transfer to the target node.
	TimeoutNow(context.Context, *TimeoutNowRequest) (*TimeoutNowResponse, error)
}

// UnimplementedRaftServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServiceServer struct {
}

func (*UnimplementedRaftServiceServer) AppendEntriesPipeline(srv RaftService_AppendEntriesPipelineServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendEntriesPipeline not implemented")
}
func (*UnimplementedRaftServiceServer) AppendEntries(ctx context.Context, req *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (*UnimplementedRaftServiceServer) RequestVote(ctx context.Context, req *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (*UnimplementedRaftServiceServer) InstallSnapshot(srv RaftService_InstallSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (*UnimplementedRaftServiceServer) TimeoutNow(ctx context.Context, req *TimeoutNowRequest) (*TimeoutNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutNow not implemented")
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_AppendEntriesPipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).AppendEntriesPipeline(&raftServiceAppendEntriesPipelineServer{stream})
}

type RaftService_AppendEntriesPipelineServer interface {
	Send(*AppendEntriesPipelineResponse) error
	Recv() (*AppendEntriesRequest, error)
	grpc.ServerStream
}

type raftServiceAppendEntriesPipelineServer struct {
	grpc.ServerStream
}

func (x *raftServiceAppendEntriesPipelineServer) Send(m *AppendEntriesPipelineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceAppendEntriesPipelineServer) Recv() (*AppendEntriesRequest, error) {
	m := new(AppendEntriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftgrpc.RaftService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftgrpc.RaftService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_InstallSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).InstallSnapshot(&raftServiceInstallSnapshotServer{stream})
}

type RaftService_InstallSnapshotServer interface {
	SendAndClose(*InstallSnapshotResponse) error
	Recv() (*InstallSnapshotStream, error)
	grpc.ServerStream
}

type raftServiceInstallSnapshotServer struct {
	grpc.ServerStream
}

func (x *raftServiceInstallSnapshotServer) SendAndClose(m *InstallSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceInstallSnapshotServer) Recv() (*InstallSnapshotStream, error) {
	m := new(InstallSnapshotStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftService_TimeoutNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).TimeoutNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftgrpc.RaftService/TimeoutNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).TimeoutNow(ctx, req.(*TimeoutNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftgrpc.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftService_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftService_RequestVote_Handler,
		},
		{
			MethodName: "TimeoutNow",
			Handler:    _RaftService_TimeoutNow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendEntriesPipeline",
			Handler:       _RaftService_AppendEntriesPipeline_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InstallSnapshot",
			Handler:       _RaftService_InstallSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "raft-grpc.proto",
}
